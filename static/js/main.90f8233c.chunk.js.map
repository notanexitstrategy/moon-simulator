{"version":3,"sources":["validation/FormValidationSchema.ts","components/Field.tsx","images/dark-mode.png","images/light-mode.png","components/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormValidationSchema","yup","shape","shareQty","required","positive","costBasis","showFloor","ceiling","floor","lessThan","increments","integer","Field","name","placeholder","useField","field","meta","className","style","width","value","toString","length","min","type","error","includes","LandingPage","useState","darkMode","setDarkMode","initialValues","renderNumber","numberToRender","natural","Math","decimal","parseFloat","toFixed","split","toLocaleString","getEarningsWithCeiling","formValues","totalSharePrice","calculateProfit","totalPriceOfSoldShares","totalPriceOfOwnedShares","Fragment","stockPriceIncrementAmount","sharesQuantityIncrementAmount","incrementPrices","incrementArray","i","incrementValue","push","totalPriceOfShares","reduce","a","b","map","price","onClick","title","src","LightModeImage","DarkModeImage","alt","validationSchema","onSubmit","values","console","log","errors","startsWith","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90f8233c.chunk.js","sourcesContent":["import * as yup from \"yup\";\n\nconst FormValidationSchema = yup.object().shape({\n  shareQty: yup\n    .number()\n    .required(\"This is a required field.\")\n    .positive(\n      \"Please enter a positive number. If you own a negative amount of shares you're fucked.\"\n    ),\n  costBasis: yup.number().positive(\"Please enter a positive number.\"),\n  showFloor: yup.boolean(),\n  ceiling: yup\n    .number()\n    .required(\"This is a required field.\")\n    .positive(\"Please enter a positive number.\"),\n  floor: yup\n    .number()\n    .required()\n    .positive(\"Please enter a positive number.\")\n    .lessThan(yup.ref(\"ceiling\")),\n  increments: yup\n    .number()\n    .positive(\"Please enter a positive number.\")\n    .integer(\"Please enter a whole number.\"),\n});\n\nexport default FormValidationSchema;\n","import { useField } from \"formik\";\n\ninterface NumberFieldProps {\n  name: string;\n  placeholder?: string;\n}\n\nconst Field = ({ name, placeholder }: NumberFieldProps) => {\n  const [field, meta] = useField(name);\n\n  return (\n    <div className=\"input\">\n      <input\n        {...field}\n        style={{\n          width: `${\n            (field.value\n              ? field.value.toString().length\n              : placeholder?.length || 1) + 1\n          }ch`,\n        }}\n        name={name}\n        min=\"0\"\n        placeholder={field.value || placeholder || \"\"}\n        type=\"number\"\n      />\n\n      <div\n        className={`input-underline ${\n          meta.error ? \"input-underline-error\" : \"\"\n        }`}\n      />\n      {[69, 420].includes(field.value) && (\n        <div className=\"input-nice\">Nice &#128527;</div>\n      )}\n    </div>\n  );\n};\n\nexport default Field;\n","export default __webpack_public_path__ + \"static/media/dark-mode.2ae31553.png\";","export default __webpack_public_path__ + \"static/media/light-mode.005d04d3.png\";","import React, { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport FormValidationSchema from \"../validation/FormValidationSchema\";\nimport Field from \"./Field\";\nimport DarkModeImage from \"../images/dark-mode.png\";\nimport LightModeImage from \"../images/light-mode.png\";\n\ninterface FormProps {\n  shareQty: number;\n  costBasis?: number;\n  showFloor?: boolean;\n  ceiling: number;\n  floor?: number;\n  increments?: number;\n}\n\nconst LandingPage = () => {\n  const [darkMode, setDarkMode] = useState<boolean>(true);\n\n  const initialValues: FormProps = {\n    shareQty: 10,\n    costBasis: 40,\n    ceiling: 10000000,\n    floor: 100000,\n    increments: 1,\n    showFloor: false,\n  };\n\n  const renderNumber = (numberToRender: number) => {\n    const natural = Math.floor(numberToRender);\n    const decimal = parseFloat(\n      numberToRender.toFixed(2).toString().split(\".\")[1]\n    );\n\n    return (\n      <span>\n        {natural.toLocaleString(\"en\")}\n        {decimal !== 0 && (\n          <>\n            .<sup>{decimal}</sup>\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const getEarningsWithCeiling = (formValues: FormProps) => {\n    const { shareQty, costBasis, ceiling, floor, increments } = formValues;\n    const totalSharePrice = shareQty * ceiling;\n\n    const calculateProfit = (totalPriceOfSoldShares: number) => {\n      if (!costBasis) {\n        return null;\n      }\n\n      const totalPriceOfOwnedShares = costBasis * shareQty;\n      return (\n        <p className=\"stonks-go-brr\">\n          Total gain:{\" \"}\n          <strong>\n            ${renderNumber(totalPriceOfSoldShares - totalPriceOfOwnedShares)}\n          </strong>\n        </p>\n      );\n    };\n\n    if (shareQty <= 0) {\n      return null;\n    }\n\n    if (!floor || !increments || increments < 2) {\n      return (\n        <React.Fragment>\n          <p className=\"stonks-go-brr\">\n            The total value of your share{shareQty > 1 ? \"s\" : \"\"} if you sell\n            everything at once:{\" \"}\n            <strong>${renderNumber(totalSharePrice)}</strong>\n          </p>\n          {calculateProfit(totalSharePrice)}\n        </React.Fragment>\n      );\n    } else {\n      const ceilingFloorDiff = ceiling - floor;\n      const stockPriceIncrementAmount = ceilingFloorDiff / (increments - 1);\n      const sharesQuantityIncrementAmount = shareQty / increments;\n\n      const incrementPrices = () => {\n        var incrementArray: number[] = [];\n\n        for (var i = 0; i < increments; i++) {\n          const incrementValue = ceiling - stockPriceIncrementAmount * i;\n          incrementArray.push(incrementValue);\n        }\n\n        return incrementArray;\n      };\n\n      const totalPriceOfShares = incrementPrices().reduce(\n        (a, b) => a + b * sharesQuantityIncrementAmount,\n        0\n      );\n\n      return (\n        <React.Fragment>\n          <p className=\"stonks-go-brr\">\n            Total value of sold shares:{\" \"}\n            <strong>${renderNumber(totalPriceOfShares)}</strong>\n          </p>\n          {calculateProfit(totalPriceOfShares)}\n          <ul>\n            {incrementPrices().map((price: number) => {\n              return (\n                <li key={price.toString()}>\n                  Sell{\" \"}\n                  <strong>{sharesQuantityIncrementAmount.toFixed(2)}</strong>{\" \"}\n                  shares at <strong>${renderNumber(price)}</strong> for a total\n                  of{\" \"}\n                  <strong>\n                    ${renderNumber(sharesQuantityIncrementAmount * price)}\n                  </strong>\n                </li>\n              );\n            })}\n          </ul>\n        </React.Fragment>\n      );\n    }\n  };\n\n  return (\n    <div className={`app-container theme-${darkMode ? \"dark\" : \"light\"}`}>\n      <div className=\"page\">\n        <button\n          onClick={() => setDarkMode(!darkMode)}\n          className=\"btn-theme\"\n          title={darkMode ? \"Sun stocks go up\" : \"Moon stocks go up\"}\n        >\n          <img src={darkMode ? LightModeImage : DarkModeImage} alt=\"\" />\n        </button>\n\n        <Formik\n          initialValues={initialValues}\n          validationSchema={FormValidationSchema}\n          onSubmit={(values: FormProps) => {\n            console.log(values);\n          }}\n        >\n          {({ values, errors }) => (\n            <form>\n              <div className=\"form\">\n                My ceiling is\n                <span>\n                  $<Field name=\"ceiling\" />\n                </span>\n                and I own\n                <span>\n                  <Field name=\"shareQty\" />\n                  shares\n                </span>\n                at an average price of\n                <span>\n                  $<Field name=\"costBasis\" />\n                  /share.\n                </span>\n                Once my target price is reached, I want to sell in&nbsp;\n                <span>\n                  <Field name=\"increments\" />\n                  increment\n                  {values.increments && values.increments > 1 ? \"s\" : \"\"}\n                </span>\n                until the price reaches\n                <span>\n                  $\n                  <Field name=\"floor\" />\n                </span>\n              </div>\n              {values.costBasis && (\n                <React.Fragment>\n                  {((values.ceiling && values.ceiling < values.costBasis) ||\n                    (values.floor && values.floor < values.costBasis)) && (\n                    <p className=\"error\">Stonks only go up. &#128640;</p>\n                  )}\n                </React.Fragment>\n              )}\n              {values.increments && values.increments > 1 ? (\n                <React.Fragment>\n                  {errors?.floor?.startsWith(\"floor must be less\") && (\n                    <p className=\"error\">\n                      I am a simple ape, I eat crayola, but I'm pretty sure your\n                      floor must be lower than your ceiling.\n                    </p>\n                  )}\n                </React.Fragment>\n              ) : null}\n              {values !== initialValues && (\n                <div className=\"earnings\">{getEarningsWithCeiling(values)}</div>\n              )}\n            </form>\n          )}\n        </Formik>\n        <p className=\"error\">Not financial advice.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import React from \"react\";\nimport LandingPage from \"./components/LandingPage\";\n\nimport \"./styles/styles.scss\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <LandingPage />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}